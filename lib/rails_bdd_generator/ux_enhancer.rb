require 'active_support/core_ext/string'

module RailsBddGenerator
  class UxEnhancer
    def initialize(app_name, app_description, entities)
      @app_name = app_name
      @app_description = app_description
      @entities = entities
      @theme = determine_theme
    end

    def enhance!
      {
        stylesheets: generate_stylesheets,
        javascript: generate_javascript,
        layouts: generate_layouts,
        components: generate_components,
        assets: generate_asset_pipeline_config
      }
    end

    private

    def determine_theme
      desc = @app_description.downcase

      case
      when desc.include?('book') || desc.include?('library') || desc.include?('reading')
        :literary
      when desc.include?('store') || desc.include?('shop') || desc.include?('commerce')
        :commerce
      when desc.include?('game') || desc.include?('card') || desc.include?('play')
        :gaming
      when desc.include?('medical') || desc.include?('health') || desc.include?('clinic')
        :medical
      when desc.include?('finance') || desc.include?('bank') || desc.include?('money')
        :financial
      when desc.include?('food') || desc.include?('restaurant') || desc.include?('recipe')
        :culinary
      else
        :modern
      end
    end

    def theme_colors
      case @theme
      when :literary
        {
          primary: '#8B4513',      # Saddle brown - like old books
          secondary: '#F5DEB3',    # Wheat - like aged pages
          accent: '#2F4F4F',       # Dark slate gray
          success: '#228B22',      # Forest green
          warning: '#DAA520',      # Goldenrod
          danger: '#B22222',       # Firebrick
          info: '#4682B4',         # Steel blue
          background: '#FAF8F5',   # Off-white like book pages
          text: '#2C1810',         # Very dark brown
          muted: '#8B7355'         # Burlywood
        }
      when :commerce
        {
          primary: '#FF6B35',      # Orange-red
          secondary: '#004E89',    # Deep blue
          accent: '#A8DADC',       # Light blue
          success: '#52B788',      # Mint green
          warning: '#F77F00',      # Orange
          danger: '#D62828',       # Red
          info: '#457B9D',         # Blue gray
          background: '#F1FAEE',   # Very light green
          text: '#1D3557',         # Dark blue
          muted: '#6C757D'         # Gray
        }
      when :gaming
        {
          primary: '#7209B7',      # Purple
          secondary: '#560BAD',    # Dark purple
          accent: '#F72585',       # Pink
          success: '#06FFA5',      # Neon green
          warning: '#FFB700',      # Gold
          danger: '#CC2936',       # Red
          info: '#3A0CA3',         # Blue purple
          background: '#0A0E27',   # Very dark blue
          text: '#F1FAEE',         # Light
          muted: '#4361EE'         # Bright blue
        }
      else # :modern default
        {
          primary: '#0066CC',      # Blue
          secondary: '#6C757D',    # Gray
          accent: '#28A745',       # Green
          success: '#28A745',      # Green
          warning: '#FFC107',      # Amber
          danger: '#DC3545',       # Red
          info: '#17A2B8',         # Cyan
          background: '#FFFFFF',   # White
          text: '#212529',         # Dark gray
          muted: '#6C757D'         # Gray
        }
      end
    end

    def generate_stylesheets
      colors = theme_colors

      main_scss = <<~SCSS
        // Theme: #{@theme.to_s.humanize} - #{@app_name}
        // Generated by Rails BDD Generator UX Enhancer

        // Color Variables
        :root {
          --primary: #{colors[:primary]};
          --secondary: #{colors[:secondary]};
          --accent: #{colors[:accent]};
          --success: #{colors[:success]};
          --warning: #{colors[:warning]};
          --danger: #{colors[:danger]};
          --info: #{colors[:info]};
          --background: #{colors[:background]};
          --text: #{colors[:text]};
          --muted: #{colors[:muted]};

          --shadow-sm: 0 2px 4px rgba(0,0,0,0.1);
          --shadow-md: 0 4px 8px rgba(0,0,0,0.15);
          --shadow-lg: 0 8px 16px rgba(0,0,0,0.2);

          --radius-sm: 4px;
          --radius-md: 8px;
          --radius-lg: 16px;
        }

        // Reset & Base
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }

        body {
          font-family: #{theme_font_family};
          background: var(--background);
          color: var(--text);
          line-height: 1.6;
          min-height: 100vh;
        }

        // Navigation
        .navbar {
          background: linear-gradient(135deg, var(--primary), var(--secondary));
          padding: 1rem 0;
          box-shadow: var(--shadow-md);
          position: sticky;
          top: 0;
          z-index: 1000;

          .container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
          }

          .navbar-brand {
            font-size: 1.5rem;
            font-weight: bold;
            color: white;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;

            #{theme_logo_styles}
          }

          .navbar-nav {
            display: flex;
            gap: 1.5rem;
            list-style: none;

            a {
              color: rgba(255,255,255,0.9);
              text-decoration: none;
              padding: 0.5rem 1rem;
              border-radius: var(--radius-sm);
              transition: all 0.3s ease;

              &:hover {
                background: rgba(255,255,255,0.2);
                color: white;
              }

              &.active {
                background: rgba(255,255,255,0.3);
                color: white;
              }
            }
          }
        }

        // Container
        .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 2rem 1rem;
        }

        // Cards
        .card {
          background: white;
          border-radius: var(--radius-md);
          box-shadow: var(--shadow-sm);
          padding: 1.5rem;
          margin-bottom: 1.5rem;
          transition: all 0.3s ease;

          &:hover {
            box-shadow: var(--shadow-md);
            transform: translateY(-2px);
          }

          .card-header {
            font-size: 1.25rem;
            font-weight: bold;
            color: var(--primary);
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid var(--accent);
          }

          .card-body {
            color: var(--text);
          }

          .card-footer {
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid rgba(0,0,0,0.1);
          }
        }

        // Forms
        .form-group {
          margin-bottom: 1.5rem;

          label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text);
          }

          input, textarea, select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: var(--radius-sm);
            font-size: 1rem;
            transition: all 0.3s ease;
            background: white;

            &:focus {
              outline: none;
              border-color: var(--primary);
              box-shadow: 0 0 0 3px rgba(var(--primary), 0.1);
            }

            &.is-invalid {
              border-color: var(--danger);
            }
          }

          textarea {
            min-height: 120px;
            resize: vertical;
          }

          .form-text {
            font-size: 0.875rem;
            color: var(--muted);
            margin-top: 0.25rem;
          }
        }

        // Buttons
        .btn {
          display: inline-block;
          padding: 0.75rem 1.5rem;
          font-size: 1rem;
          font-weight: 500;
          text-align: center;
          text-decoration: none;
          border: none;
          border-radius: var(--radius-sm);
          cursor: pointer;
          transition: all 0.3s ease;

          &.btn-primary {
            background: var(--primary);
            color: white;

            &:hover {
              background: darken(var(--primary), 10%);
              transform: translateY(-2px);
              box-shadow: var(--shadow-md);
            }
          }

          &.btn-secondary {
            background: var(--secondary);
            color: white;

            &:hover {
              background: darken(var(--secondary), 10%);
            }
          }

          &.btn-success {
            background: var(--success);
            color: white;
          }

          &.btn-danger {
            background: var(--danger);
            color: white;
          }

          &.btn-outline {
            background: transparent;
            color: var(--primary);
            border: 2px solid var(--primary);

            &:hover {
              background: var(--primary);
              color: white;
            }
          }

          &.btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
          }

          &.btn-lg {
            padding: 1rem 2rem;
            font-size: 1.125rem;
          }

          &:disabled {
            opacity: 0.6;
            cursor: not-allowed;
          }
        }

        // Tables
        .table-responsive {
          overflow-x: auto;
          margin: 1rem 0;
        }

        table {
          width: 100%;
          border-collapse: collapse;
          background: white;

          thead {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;

            th {
              padding: 1rem;
              text-align: left;
              font-weight: 600;
            }
          }

          tbody {
            tr {
              border-bottom: 1px solid #eee;
              transition: background 0.3s ease;

              &:hover {
                background: rgba(var(--primary), 0.05);
              }

              td {
                padding: 1rem;
              }
            }
          }
        }

        // Alerts
        .alert {
          padding: 1rem;
          border-radius: var(--radius-sm);
          margin-bottom: 1rem;

          &.alert-success {
            background: rgba(var(--success), 0.1);
            color: var(--success);
            border: 1px solid var(--success);
          }

          &.alert-danger {
            background: rgba(var(--danger), 0.1);
            color: var(--danger);
            border: 1px solid var(--danger);
          }

          &.alert-warning {
            background: rgba(var(--warning), 0.1);
            color: var(--warning);
            border: 1px solid var(--warning);
          }

          &.alert-info {
            background: rgba(var(--info), 0.1);
            color: var(--info);
            border: 1px solid var(--info);
          }
        }

        // Badges
        .badge {
          display: inline-block;
          padding: 0.25rem 0.75rem;
          font-size: 0.875rem;
          font-weight: 600;
          border-radius: 999px;

          &.badge-primary {
            background: var(--primary);
            color: white;
          }

          &.badge-success {
            background: var(--success);
            color: white;
          }

          &.badge-warning {
            background: var(--warning);
            color: white;
          }

          &.badge-danger {
            background: var(--danger);
            color: white;
          }
        }

        // Grid System
        .row {
          display: flex;
          flex-wrap: wrap;
          margin: -0.5rem;

          .col {
            flex: 1;
            padding: 0.5rem;
          }

          .col-12 { flex: 0 0 100%; }
          .col-6 { flex: 0 0 50%; }
          .col-4 { flex: 0 0 33.333%; }
          .col-3 { flex: 0 0 25%; }
          .col-8 { flex: 0 0 66.666%; }

          @media (max-width: 768px) {
            .col-md-12 { flex: 0 0 100%; }
            .col-md-6 { flex: 0 0 100%; }
            .col-md-4 { flex: 0 0 100%; }
          }
        }

        // Hero Section
        .hero {
          background: linear-gradient(135deg, var(--primary), var(--secondary));
          color: white;
          padding: 4rem 1rem;
          text-align: center;
          margin-bottom: 2rem;
          border-radius: var(--radius-lg);

          h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
          }

          p {
            font-size: 1.25rem;
            opacity: 0.9;
          }
        }

        // Feature Cards
        .feature-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 1.5rem;
          margin: 2rem 0;

          .feature-card {
            background: white;
            padding: 2rem;
            border-radius: var(--radius-md);
            text-align: center;
            box-shadow: var(--shadow-sm);
            transition: all 0.3s ease;

            &:hover {
              transform: translateY(-5px);
              box-shadow: var(--shadow-lg);
            }

            .feature-icon {
              font-size: 3rem;
              color: var(--primary);
              margin-bottom: 1rem;
            }

            h3 {
              color: var(--primary);
              margin-bottom: 0.5rem;
            }

            p {
              color: var(--muted);
            }
          }
        }

        // Pagination
        .pagination {
          display: flex;
          justify-content: center;
          gap: 0.5rem;
          margin: 2rem 0;

          a, span {
            padding: 0.5rem 1rem;
            border: 1px solid var(--primary);
            border-radius: var(--radius-sm);
            color: var(--primary);
            text-decoration: none;
            transition: all 0.3s ease;

            &:hover {
              background: var(--primary);
              color: white;
            }

            &.current {
              background: var(--primary);
              color: white;
            }

            &.disabled {
              opacity: 0.5;
              cursor: not-allowed;
            }
          }
        }

        // Search Bar
        .search-form {
          display: flex;
          gap: 0.5rem;
          margin-bottom: 2rem;

          input {
            flex: 1;
            padding: 0.75rem;
            border: 2px solid var(--primary);
            border-radius: var(--radius-sm);
            font-size: 1rem;
          }

          button {
            padding: 0.75rem 1.5rem;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: all 0.3s ease;

            &:hover {
              background: darken(var(--primary), 10%);
            }
          }
        }

        // Loading Spinner
        .spinner {
          display: inline-block;
          width: 40px;
          height: 40px;
          border: 4px solid rgba(var(--primary), 0.3);
          border-top-color: var(--primary);
          border-radius: 50%;
          animation: spin 1s linear infinite;
        }

        @keyframes spin {
          to { transform: rotate(360deg); }
        }

        // Animations
        .fade-in {
          animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }

        // Theme-specific styles
        #{theme_specific_styles}

        // Responsive
        @media (max-width: 768px) {
          .navbar .navbar-nav {
            display: none;
          }

          .hero h1 {
            font-size: 2rem;
          }

          .container {
            padding: 1rem;
          }
        }

        // Print styles
        @media print {
          .navbar, .btn, .pagination {
            display: none;
          }

          body {
            background: white;
            color: black;
          }
        }
      SCSS

      { 'application.scss' => main_scss }
    end

    def theme_font_family
      case @theme
      when :literary
        "'Merriweather', 'Georgia', serif"
      when :medical
        "'Roboto', 'Arial', sans-serif"
      when :financial
        "'IBM Plex Sans', 'Arial', sans-serif"
      when :gaming
        "'Orbitron', 'Roboto', sans-serif"
      when :culinary
        "'Playfair Display', 'Georgia', serif"
      else
        "'Inter', 'Segoe UI', 'Roboto', sans-serif"
      end
    end

    def theme_logo_styles
      case @theme
      when :literary
        ""
      when :commerce
        ""
      when :gaming
        ""
      else
        ""
      end
    end

    def theme_specific_styles
      case @theme
      when :literary
        <<~SCSS
          // Book-themed decorations
          .book-spine {
            border-left: 4px solid var(--primary);
            padding-left: 1rem;
            margin: 1rem 0;
          }

          blockquote {
            font-style: italic;
            border-left: 4px solid var(--accent);
            padding-left: 1rem;
            color: var(--muted);
          }

          .reading-time {
            color: var(--muted);
            font-size: 0.875rem;
            &::before { content: "⏱️ "; }
          }
        SCSS
      when :commerce
        <<~SCSS
          // E-commerce specific
          .price {
            font-size: 1.5rem;
            color: var(--primary);
            font-weight: bold;
            &::before { content: "$"; }
          }

          .discount-badge {
            background: var(--danger);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: var(--radius-sm);
            font-weight: bold;
          }

          .stock-status {
            &.in-stock { color: var(--success); }
            &.low-stock { color: var(--warning); }
            &.out-of-stock { color: var(--danger); }
          }
        SCSS
      when :gaming
        <<~SCSS
          // Gaming theme
          .score {
            font-size: 2rem;
            font-weight: bold;
            color: var(--accent);
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
          }

          .level-badge {
            background: linear-gradient(135deg, var(--primary), var(--accent));
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 999px;
            font-weight: bold;
          }

          .achievement {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            background: rgba(var(--accent), 0.1);
            border-radius: var(--radius-md);

            .achievement-icon {
              font-size: 2rem;
            }
          }
        SCSS
      else
        ""
      end
    end

    def generate_javascript
      <<~JS
        // Rails BDD Generator - UX Enhancement JavaScript
        // Theme: #{@theme.to_s.humanize}

        document.addEventListener('DOMContentLoaded', function() {

          // Smooth scrolling for anchor links
          document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
              e.preventDefault();
              const target = document.querySelector(this.getAttribute('href'));
              if (target) {
                target.scrollIntoView({ behavior: 'smooth', block: 'start' });
              }
            });
          });

          // Add animation classes to elements as they come into view
          const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
          };

          const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                entry.target.classList.add('fade-in');
                observer.unobserve(entry.target);
              }
            });
          }, observerOptions);

          document.querySelectorAll('.card, .feature-card, tr').forEach(el => {
            observer.observe(el);
          });

          // Form validation feedback
          const forms = document.querySelectorAll('form');
          forms.forEach(form => {
            form.addEventListener('submit', function(e) {
              const requiredFields = form.querySelectorAll('[required]');
              let isValid = true;

              requiredFields.forEach(field => {
                if (!field.value.trim()) {
                  field.classList.add('is-invalid');
                  isValid = false;
                } else {
                  field.classList.remove('is-invalid');
                }
              });

              if (!isValid) {
                e.preventDefault();
                // Show error message
                const alert = document.createElement('div');
                alert.className = 'alert alert-danger';
                alert.textContent = 'Please fill in all required fields.';
                form.insertBefore(alert, form.firstChild);

                setTimeout(() => alert.remove(), 5000);
              }
            });
          });

          // Auto-dismiss alerts
          document.querySelectorAll('.alert').forEach(alert => {
            setTimeout(() => {
              alert.style.transition = 'opacity 0.5s';
              alert.style.opacity = '0';
              setTimeout(() => alert.remove(), 500);
            }, 5000);
          });

          // Table row actions
          document.querySelectorAll('table tbody tr').forEach(row => {
            row.style.cursor = 'pointer';
            row.addEventListener('click', function(e) {
              if (!e.target.matches('a, button')) {
                const showLink = row.querySelector('a[href*="show"], a[href*="edit"]');
                if (showLink) {
                  window.location = showLink.href;
                }
              }
            });
          });

          // Search form enhancements
          const searchInputs = document.querySelectorAll('.search-form input');
          searchInputs.forEach(input => {
            input.addEventListener('input', function() {
              if (this.value.length > 0) {
                this.classList.add('has-value');
              } else {
                this.classList.remove('has-value');
              }
            });
          });

          // Confirm dialogs
          document.querySelectorAll('[data-confirm]').forEach(element => {
            element.addEventListener('click', function(e) {
              if (!confirm(this.dataset.confirm)) {
                e.preventDefault();
              }
            });
          });

          // Mobile menu toggle (if needed)
          const menuToggle = document.querySelector('.menu-toggle');
          if (menuToggle) {
            menuToggle.addEventListener('click', function() {
              document.querySelector('.navbar-nav').classList.toggle('show');
            });
          }

          // Loading states for forms
          document.querySelectorAll('form').forEach(form => {
            form.addEventListener('submit', function() {
              const submitBtn = form.querySelector('[type="submit"]');
              if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<span class="spinner"></span> Processing...';
              }
            });
          });

          // Theme-specific enhancements
          #{theme_specific_javascript}
        });

        // Helper functions
        function formatCurrency(amount) {
          return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD'
          }).format(amount);
        }

        function formatDate(dateString) {
          const options = { year: 'numeric', month: 'long', day: 'numeric' };
          return new Date(dateString).toLocaleDateString(undefined, options);
        }

        // Debounce function for search
        function debounce(func, wait) {
          let timeout;
          return function executedFunction(...args) {
            const later = () => {
              clearTimeout(timeout);
              func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
          };
        }
      JS
    end

    def theme_specific_javascript
      case @theme
      when :literary
        <<~JS
          // Add reading progress indicator
          const article = document.querySelector('article');
          if (article) {
            const progressBar = document.createElement('div');
            progressBar.className = 'reading-progress';
            progressBar.style.cssText = 'position: fixed; top: 0; left: 0; width: 0; height: 3px; background: var(--primary); z-index: 9999;';
            document.body.appendChild(progressBar);

            window.addEventListener('scroll', () => {
              const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;
              const scrollPosition = window.pageYOffset;
              const progress = (scrollPosition / scrollHeight) * 100;
              progressBar.style.width = progress + '%';
            });
          }
        JS
      when :commerce
        <<~JS
          // Shopping cart animations
          document.querySelectorAll('.add-to-cart').forEach(btn => {
            btn.addEventListener('click', function() {
              // Add animation
              this.classList.add('added');
              setTimeout(() => this.classList.remove('added'), 1000);

              // Update cart count
              const cartCount = document.querySelector('.cart-count');
              if (cartCount) {
                const count = parseInt(cartCount.textContent) || 0;
                cartCount.textContent = count + 1;
                cartCount.classList.add('bounce');
                setTimeout(() => cartCount.classList.remove('bounce'), 500);
              }
            });
          });

          // Price formatting
          document.querySelectorAll('.price').forEach(el => {
            const price = parseFloat(el.textContent);
            if (!isNaN(price)) {
              el.textContent = formatCurrency(price);
            }
          });
        JS
      when :gaming
        <<~JS
          // Add achievement notifications
          function showAchievement(title, description) {
            const notification = document.createElement('div');
            notification.className = 'achievement-notification';
            notification.innerHTML = `
              <div class="achievement-icon">🏆</div>
              <div>
                <strong>\${title}</strong>
                <p>\${description}</p>
              </div>
            `;
            notification.style.cssText = 'position: fixed; top: 20px; right: 20px; background: var(--primary); color: white; padding: 1rem; border-radius: 8px; display: flex; gap: 1rem; align-items: center; z-index: 9999; animation: slideIn 0.5s;';
            document.body.appendChild(notification);

            setTimeout(() => notification.remove(), 5000);
          }

          // Animate score changes
          document.querySelectorAll('.score').forEach(score => {
            const target = parseInt(score.textContent);
            let current = 0;
            const increment = target / 50;
            const timer = setInterval(() => {
              current += increment;
              if (current >= target) {
                score.textContent = target;
                clearInterval(timer);
              } else {
                score.textContent = Math.floor(current);
              }
            }, 20);
          });
        JS
      else
        ""
      end
    end

    def generate_layouts
      colors = theme_colors

      layout = <<~ERB
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title><%= content_for?(:title) ? yield(:title) : "#{@app_name}" %></title>

          <!-- Font Loading -->
          <link rel="preconnect" href="https://fonts.googleapis.com">
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
          <link href="#{theme_font_link}" rel="stylesheet">

          <%= csrf_meta_tags %>
          <%= csp_meta_tag %>

          <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
          <%= javascript_include_tag "application", "data-turbo-track": "reload", defer: true %>
        </head>
        <body>
          <nav class="navbar">
            <div class="container">
              <%= link_to "#{@app_name}", root_path, class: "navbar-brand" %>

              <ul class="navbar-nav">
                <% if user_signed_in? %>
                  #{generate_nav_items}
                  <li>
                    <%= link_to "Profile", edit_user_path(current_user) %>
                  </li>
                  <li>
                    <%= button_to "Logout", logout_path, method: :delete, class: "btn btn-sm" %>
                  </li>
                <% else %>
                  <li>
                    <%= link_to "Login", login_path %>
                  </li>
                  <li>
                    <%= link_to "Sign Up", signup_path, class: "btn btn-primary btn-sm" %>
                  </li>
                <% end %>
              </ul>

              <button class="menu-toggle">☰</button>
            </div>
          </nav>

          <% if flash.any? %>
            <div class="container">
              <% flash.each do |type, message| %>
                <div class="alert alert-<%= flash_class(type) %>">
                  <%= message %>
                </div>
              <% end %>
            </div>
          <% end %>

          <main>
            <%= yield %>
          </main>

          <footer style="background: var(--secondary); color: white; padding: 2rem 0; margin-top: 3rem;">
            <div class="container" style="text-align: center;">
              <p>&copy; <%= Date.current.year %> #{@app_name}. All rights reserved.</p>
              <p style="opacity: 0.8; font-size: 0.875rem;">Generated with Rails BDD Generator</p>
            </div>
          </footer>
        </body>
        </html>
      ERB

      { 'application.html.erb' => layout }
    end

    def theme_font_link
      case @theme
      when :literary
        "https://fonts.googleapis.com/css2?family=Merriweather:wght@300;400;700&display=swap"
      when :gaming
        "https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap"
      when :culinary
        "https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&display=swap"
      when :financial
        "https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@400;500;600;700&display=swap"
      else
        "https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      end
    end

    def generate_nav_items
      @entities.take(3).map do |entity|
        <<~ERB
          <li>
            <%= link_to "#{entity[:name].pluralize.capitalize}", #{entity[:name].pluralize}_path,
                class: current_page?(#{entity[:name].pluralize}_path) ? "active" : "" %>
          </li>
        ERB
      end.join
    end

    def generate_components
      components = {}

      # Dashboard component
      components['_dashboard.html.erb'] = <<~ERB
        <div class="hero">
          <h1>Welcome to #{@app_name}</h1>
          <p>#{@app_description}</p>
        </div>

        <div class="feature-grid">
          #{generate_feature_cards}
        </div>

        <div class="row">
          <div class="col-8">
            <div class="card">
              <div class="card-header">Recent Activity</div>
              <div class="card-body">
                <%= render 'shared/recent_activity' %>
              </div>
            </div>
          </div>

          <div class="col-4">
            <div class="card">
              <div class="card-header">Quick Stats</div>
              <div class="card-body">
                <%= render 'shared/stats' %>
              </div>
            </div>
          </div>
        </div>
      ERB

      # Search component
      components['_search.html.erb'] = <<~ERB
        <%= form_with url: search_path, method: :get, class: "search-form" do |f| %>
          <%= f.text_field :q, placeholder: "Search #{@app_name}...", value: params[:q] %>
          <%= f.submit "Search", class: "btn btn-primary" %>
        <% end %>
      ERB

      # Stats component
      components['_stats.html.erb'] = <<~ERB
        <div class="stats-grid">
          #{generate_stats_items}
        </div>
      ERB

      components
    end

    def generate_feature_cards
      features = case @theme
      when :literary
        [
          { icon: "<%= book_icon %>", title: "Browse Collection", desc: "Explore our vast library" },
          { icon: "<%= star_icon %>", title: "Top Rated", desc: "Discover highly-rated books" },
          { icon: "<%= search_icon %>", title: "Advanced Search", desc: "Find exactly what you need" }
        ]
      when :commerce
        [
          { icon: "<%= shopping_cart_icon %>", title: "Shop Now", desc: "Browse our catalog" },
          { icon: "<%= payment_icon %>", title: "Secure Checkout", desc: "Safe & fast payment" },
          { icon: "<%= delivery_icon %>", title: "Fast Delivery", desc: "Get it delivered quickly" }
        ]
      when :gaming
        [
          { icon: "<%= gaming_icon %>", title: "Play Games", desc: "Start your adventure" },
          { icon: "<%= trophy_icon %>", title: "Achievements", desc: "Unlock rewards" },
          { icon: "<%= users_icon %>", title: "Multiplayer", desc: "Play with friends" }
        ]
      else
        [
          { icon: "<%= sparkle_icon %>", title: "Feature One", desc: "Amazing capability" },
          { icon: "<%= rocket_icon %>", title: "Feature Two", desc: "Powerful performance" },
          { icon: "<%= lightbulb_icon %>", title: "Feature Three", desc: "Smart solutions" }
        ]
      end

      features.map do |f|
        <<~HTML
          <div class="feature-card">
            <div class="feature-icon">#{f[:icon]}</div>
            <h3>#{f[:title]}</h3>
            <p>#{f[:desc]}</p>
          </div>
        HTML
      end.join
    end

    def generate_stats_items
      @entities.take(4).map do |entity|
        <<~ERB
          <div class="stat-item" style="margin-bottom: 1rem;">
            <div style="font-size: 2rem; font-weight: bold; color: var(--primary);">
              <%= #{entity[:name].capitalize}.count %>
            </div>
            <div style="color: var(--muted);">
              Total #{entity[:name].pluralize.capitalize}
            </div>
          </div>
        ERB
      end.join
    end

    def generate_asset_pipeline_config
      {
        'manifest.js' => <<~JS
          //= link_tree ../images
          //= link_directory ../stylesheets .css
          //= link_tree ../../javascript .js
          //= link_tree ../../../vendor/javascript .js
        JS
      }
    end
  end
end