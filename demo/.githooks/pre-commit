#!/bin/bash
# Pre-commit hook for Rails BDD Generator applications
# Ensures code quality before commits

set -e

echo "üîç Running pre-commit checks..."

# 1. Check for debugging statements
echo "Checking for debugging statements..."
debugging_statements=$(git diff --cached --name-only --diff-filter=ACM | xargs -I {} grep -l 'binding\.pry\|debugger\|console\.log\|puts.*DEBUG' {} 2>/dev/null || true)

if [ -n "$debugging_statements" ]; then
  echo "‚ùå Debugging statements found in:"
  echo "$debugging_statements"
  echo "Please remove debugging statements before committing."
  exit 1
fi

# 2. Check for migration safety
echo "Checking migration safety..."
migration_files=$(git diff --cached --name-only | grep "db/migrate/.*\.rb$" || true)

if [ -n "$migration_files" ]; then
  echo "üìù Migration files detected:"
  echo "$migration_files"

  for file in $migration_files; do
    # Check for unsafe operations
    if grep -q "remove_column\|drop_table\|change_column" "$file"; then
      echo "‚ö†Ô∏è  WARNING: Potentially unsafe migration operations detected in $file"
      echo "   Consider using safe migration helpers or adding safety comments"
      read -p "   Continue anyway? (y/N) " -n 1 -r
      echo
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
      fi
    fi
  done
fi

# 3. Check for broken tests (if any are staged)
spec_files=$(git diff --cached --name-only | grep "_spec\.rb$" || true)
if [ -n "$spec_files" ]; then
  echo "Running tests for staged spec files..."
  for file in $spec_files; do
    if [ -f "$file" ]; then
      if ! bundle exec rspec "$file" --format progress > /dev/null 2>&1; then
        echo "‚ùå Tests failing in $file"
        echo "Fix the tests before committing."
        exit 1
      fi
    fi
  done
  echo "‚úÖ Staged tests passing"
fi

# 4. Check for large files
echo "Checking file sizes..."
large_files=$(git diff --cached --name-only | xargs -I {} sh -c 'test -f "{}" && du -k "{}" | awk "$1 > 1000 {print $2}"' 2>/dev/null || true)

if [ -n "$large_files" ]; then
  echo "‚ö†Ô∏è  Large files detected (>1MB):"
  echo "$large_files"
  read -p "Are you sure you want to commit large files? (y/N) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  fi
fi

# 5. Check for sensitive data patterns
echo "Checking for sensitive data..."
sensitive_patterns="password.*=|api[_-]?key.*=|secret.*=|token.*=|private[_-]?key"
sensitive_files=$(git diff --cached --name-only --diff-filter=ACM | xargs -I {} grep -l -E -i "$sensitive_patterns" {} 2>/dev/null || true)

if [ -n "$sensitive_files" ]; then
  echo "‚ö†Ô∏è  Potential sensitive data found in:"
  echo "$sensitive_files"
  echo "Please review these files for hardcoded secrets."
  read -p "Have you reviewed and confirmed no secrets are exposed? (y/N) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  fi
fi

echo "‚úÖ Pre-commit checks passed!"
exit 0
