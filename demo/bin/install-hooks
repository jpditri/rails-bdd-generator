#!/bin/bash
# Script to install git hooks

set -e

echo "Installing git hooks..."

HOOKS_DIR=".githooks"
GIT_HOOKS_DIR=".git/hooks"

# Ensure we're in a git repository
if [ ! -d ".git" ]; then
  echo "❌ Not in a git repository root!"
  exit 1
fi

# Create hooks directory if it doesn't exist
mkdir -p "$GIT_HOOKS_DIR"

# Install each hook
for hook in "$HOOKS_DIR"/*; do
  if [ -f "$hook" ]; then
    hook_name=$(basename "$hook")

    # Skip the rubocop hook if not wanted
    if [ "$hook_name" = "pre-commit-rubocop" ] && [ "$SKIP_RUBOCOP_HOOK" = "true" ]; then
      echo "  Skipping $hook_name"
      continue
    fi

    # Special handling for multiple pre-commit hooks
    if [ "$hook_name" = "pre-commit-rubocop" ]; then
      # Append to pre-commit if it exists
      if [ -f "$GIT_HOOKS_DIR/pre-commit" ]; then
        echo "" >> "$GIT_HOOKS_DIR/pre-commit"
        echo "# RuboCop checks" >> "$GIT_HOOKS_DIR/pre-commit"
        tail -n +2 "$hook" >> "$GIT_HOOKS_DIR/pre-commit"
        echo "  Added RuboCop to pre-commit"
      fi
    else
      cp "$hook" "$GIT_HOOKS_DIR/$hook_name"
      chmod +x "$GIT_HOOKS_DIR/$hook_name"
      echo "  Installed $hook_name"
    fi
  fi
done

# Configure git to use the hooks
git config core.hooksPath .git/hooks

echo "✅ Git hooks installed successfully!"
echo ""
echo "Hooks installed:"
echo "  • pre-commit: Checks for debugging statements, migration safety, and sensitive data"
echo "  • pre-push: Verifies migrations, tests, and deployment readiness"
echo "  • commit-msg: Enforces conventional commit message format"
echo ""
echo "To bypass hooks temporarily, use --no-verify flag:"
echo "  git commit --no-verify"
echo "  git push --no-verify"
echo ""
echo "Environment variables:"
echo "  • RUN_TESTS_ON_PUSH=true : Run full test suite before pushing"
echo "  • SKIP_RUBOCOP_HOOK=true : Skip RuboCop auto-correct on commit"
